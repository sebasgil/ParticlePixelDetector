"""
Testing of program behaviour.
"""
import unittest
from typing import List
import common

class EventGeneratorTest(unittest.TestCase):
    """
    Verify the uniqueness of ids generated by EventIdGenerator.
    """
    # NOTE: the method name needs to start with "test" to be recognized
    # by the unittest test runner. unittest is from the python standard
    # library
    def test_thousand_ids_unique(self):
        """
        Requests a thousand ids and checks that they are all distinct.
        """
        generator = common.EventIdGenerator()
        ids: List[common.EventId] = list()
        for _ in range(1000):
            ids.append(generator.new_id())

        # Check if ids as a list contains the same number of elements as
        # ids as a set.
        self.assertTrue(len(ids) == len(set(ids)))

    def test_return_type(self):
        """
        Checks if the generator generates EventIds
        """
        one_id = common.EventIdGenerator().new_id()
        self.assertIsInstance(
                one_id,
                common.EventId,
                msg="Generated ids should be of type EventId but are of type {}"
                    .format(type(one_id))
        )

if __name__ == '__main__':
    unittest.main()
